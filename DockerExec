#!/bin/bash

###
### Colors
###

COLOR_BLUE="\033[0;36m"
COLOR_GREEN="\033[0;32m"
COLOR_ORANGE="\033[0;33m"
COLOR_RED="\033[0;31m"
COLOR_WHITE='\033[0m'

# add colorize functions
function print_error() {
    local MESSAGE=$1
    local NEWLINE=$2

    if [[ -z "$NEWLINE" ]]; then
        NEWLINE=0
    fi

    echo -e "${COLOR_RED}$MESSAGE${COLOR_WHITE}"

    if [[ "1" == "$NEWLINE" ]]; then
        echo
    fi
}

function print_info() {
    local MESSAGE=$1
    local NEWLINE=$2

    if [[ -z "$NEWLINE" ]]; then
        NEWLINE=0
    fi

    echo -e "${COLOR_BLUE}$MESSAGE${COLOR_WHITE}"

    if [[ "1" == "$NEWLINE" ]]; then
        echo
    fi
}


###
### How to install this script
###
if [[ -z "$PROXY_PATH" ]]; then
    SCRIPT_PATH=`realpath "$0"`

    echo
    echo -e "${COLOR_WHITE}Installation:"
    echo
    echo -e "  Make sure to clone the repository via ${COLOR_ORANGE}git clone${COLOR_WHITE} to this machine."
    echo -e "  Then open the ~/.bashrc file in an editor and add following lines:"
    echo
    echo -e "${COLOR_ORANGE}    # enable DockerExec (docker-proxy-stack)${COLOR_WHITE}"
    echo -e "${COLOR_ORANGE}    PROXY_PATH='/path/to/docker-proxy-stack'${COLOR_WHITE} # change this"
    echo -e "${COLOR_ORANGE}    alias DockerExec='PROXY_PATH=\$PROXY_PATH $SCRIPT_PATH'${COLOR_WHITE} # do not change this"
    echo
    echo -e "  On Windows, the .bashrc is probably located at ${COLOR_ORANGE}C:\Users\%username%\.bashrc${COLOR_WHITE},"
    echo -e "  if  'Git for Windows' or some WSL is installed."
    echo

    exit 0
fi


###
### start of program
###

# get the arguments and set default parameter, if none was given
ENVIRONMENT=$1; shift

case "$ENVIRONMENT" in
    dev|prod|proxy|do)
        ACTION=$1; shift
        ;;
    *)
        ACTION="$ENVIRONMENT"
        ENVIRONMENT="do"
        ;;
esac

PARAMETERS=("$@")

if [[ -z "$ACTION" ]]; then
    ACTION="ps"
fi

# return the help statement, if asked for
if [[ "help" == "$ACTION" || "--help" == "$ACTION" || "-h" == "$ACTION" ]]; then
    BN=`basename $0`

    echo
    echo -e "${COLOR_WHITE}Usage:"
    echo -e "  $BN ${COLOR_GREEN}[Environment] ${COLOR_BLUE}[Option] ${COLOR_RED}[\$Parameter(s)] ${COLOR_WHITE}"
    echo
    echo -e "${COLOR_WHITE}Environments and their options:"
    echo -e " ${COLOR_GREEN}dev${COLOR_WHITE}: Controls for docker-compose.yml and docker-compose.dev.yml"
    echo -e "    ${COLOR_BLUE}start${COLOR_WHITE}              - executes an extended docker-compose setup with the local file"
    echo -e "    ${COLOR_BLUE}stop${COLOR_WHITE}               - shutdown for the local docker-compose setup"
    echo
    echo -e " ${COLOR_GREEN}prod${COLOR_WHITE}: Controls for docker-compose.prod.yml"
    echo -e "    ${COLOR_BLUE}start${COLOR_WHITE}              - executes an extended docker-compose setup with the local file"
    echo -e "    ${COLOR_BLUE}stop${COLOR_WHITE}               - shutdown for the local docker-compose setup"
    echo
    echo -e " ${COLOR_GREEN}proxy${COLOR_WHITE}: Controls docker-compose.proxy.yml and the proxy stack"
    echo -e "    ${COLOR_BLUE}init${COLOR_WHITE}               - starts the docker NGINX proxy stack and creates a netzwork, if necessary"
    echo -e "    ${COLOR_BLUE}finish${COLOR_WHITE}             - shuts the docker NGINX proxy stack down"
    echo -e "    ${COLOR_BLUE}start${COLOR_WHITE}              - executes an extended docker-compose setup with the local file"
    echo -e "    ${COLOR_BLUE}stop${COLOR_WHITE}               - shutdown for the local docker-compose setup"
    echo -e "    ${COLOR_BLUE}db ${COLOR_RED}[\$db \$f]${COLOR_WHITE}        - running a bash on the MySQL proxy database [or will import an .sql file with specified \$dbname and \$filename]"
    echo -e "    ${COLOR_BLUE}pg ${COLOR_RED}[\$db \$f]${COLOR_WHITE}        - running a bash on the Postgres proxy database [or will import an .sql file with specified \$dbname and \$filename]"
    echo -e "    ${COLOR_BLUE}generate${COLOR_WHITE} ${COLOR_RED}[\$dp]${COLOR_WHITE}     - creates a docker-compose.proxy.yaml + .env file with linked [\$dp].docker.test"
    echo
    echo -e " ${COLOR_GREEN}do${COLOR_WHITE}: Other tools"
    echo -e "    ${COLOR_BLUE}ps${COLOR_WHITE}                 - lists all containers like 'docker ps -a'"
    echo -e "    ${COLOR_BLUE}remove${COLOR_WHITE}             - does a 'docker rm' to all containers that have stopped running"
    echo -e "    ${COLOR_BLUE}cleanup${COLOR_WHITE}            - deletes all docker images, that have a <none> as tag name or image id"
    echo -e "    ${COLOR_BLUE}finish${COLOR_WHITE}             - stops and removes all current containers, like 'docker stop && docker rm'"
    echo -e "    ${COLOR_BLUE}watch-running ${COLOR_RED}\$cn${COLOR_WHITE}  - tests, whether a container with name '\$cn' is running and returns 'TRUE' or 'FALSE' as a string"
    echo -e "    ${COLOR_BLUE}status ${COLOR_RED}[\$fn]${COLOR_WHITE}       - creates a text file [\$fn] in current location that contains a list of images and runninge containers on this machine"
    echo -e "    ${COLOR_BLUE}init-certs${COLOR_WHITE}         - create openssl certificates to be registered in your browsers"
    echo

    exit 0
fi

# test, if proxy directory is existing
if [[ ! -z "$PROXY_PATH" && ! -d "$PROXY_PATH" ]]; then
    print_error "The path to the docker-proxy-stack directory seems no to be configured correctly..." 1
    exit 1
fi

# remove the trailing slash
PROXY_PATH=${PROXY_PATH%/}

# set some more defaults
ENV_FILE=".env"
CURRENT_DIR=`pwd`
LINUX_HOSTS=/etc/hosts
CERTS_PATH="$PROXY_PATH/certs"
STATUS_FILE_NAME="docker_current.txt"
TEMP_HOSTS_FILE=".current-hosts"
TEMP_HOSTS_PATH="$PROXY_PATH/$TEMP_HOSTS_FILE"

# offer a function to test a directory on having valid .env and (.yml or .yaml)
function test_files() {
    local ENV_FILE=$1
    local COMPOSE=$2
    local COMPOSE_V1="$COMPOSE.yml"
    local COMPOSE_V2="$COMPOSE.yaml"

    if [[ ! ( -e "$ENV_FILE" || -f "$ENV_FILE" ) ]]; then
        print_error "The $ENV_FILE file was not found! Are you located in your project directory?" 1
        exit 1
    fi

    if [[ ! ( -e "$COMPOSE_V1" || -f "$COMPOSE_V1" ) ]]; then
        if [[ ! ( -e "$COMPOSE_V2" || -f "$COMPOSE_V2" ) ]]; then
            print_error "No $COMPOSE_V1 or $COMPOSE_V2 file was found! Are you located in your project directory?" 1
            exit 1
        else
            echo $COMPOSE_V2
        fi
    else
        echo $COMPOSE_V1
    fi

    exit 0
}

function test_files_proxy() {
    local ENV_FILE=$1
    local COMPOSE=$2
    local COMPOSE_V1="$COMPOSE.yml"
    local COMPOSE_V2="$COMPOSE.yaml"

    if [[ ! ( -e "$ENV_FILE" || -f "$ENV_FILE" ) ]]; then
        print_error "The $ENV_FILE file was not found! The proxy-stack is not configured, yet!" 1
        exit 1
    fi

    if [[ ! ( -e "$COMPOSE_V1" || -f "$COMPOSE_V1" ) ]]; then
        if [[ ! ( -e "$COMPOSE_V2" || -f "$COMPOSE_V2" ) ]]; then
            print_error "No $COMPOSE_V1 or $COMPOSE_V2 file was found! Something is wrong here..." 1
            exit 1
        else
            echo $COMPOSE_V2
        fi
    else
        echo $COMPOSE_V1
    fi

    exit 0
}

# offer a function to print found hosts as a list
# and also include into the hosts file, if not done yet
function print_hosts() {
    local COMPOSE=$1
    local HOSTS=`grep "VIRTUAL_HOST:" "$COMPOSE" | sed -e 's/VIRTUAL_HOST://' | sed -e 's/[[:space:]]*$//' | sed -e 's/^[[:space:]]*//' | sed 's/, /,/' | sed 's/,/\n/'`

    # sudo must be given
    sudo true

    print_info "Folgende Hosts werden gestartet:"
    echo "$HOSTS" | while read -r line; do
        if [[ ! -z "$line" ]]; then
            # append host to hosts file, if not yet included
            HOSTS_HAS_FILE=`grep "$line" "$LINUX_HOSTS"`
            if [[ -f "$LINUX_HOSTS" && -z "$HOSTS_HAS_FILE" ]]; then
                local STUB=`echo "127.0.0.1    $line" | sudo tee -a "$LINUX_HOSTS"`
            fi

            echo "  https://$line"
        fi
    done
}

# offer a function that tries to find the current -app container name
function get_container_names() {
    local ENV_FILE=$1
    local APP_PREFIX=`grep "^CON_PREFIX=" "$ENV_FILE" | sed -e 's/^CON_PREFIX=//' | sed -e 's/[[:space:]]*$//'`
    local APP_NAME=`grep "^CON_NAME=" "$ENV_FILE" | sed -e 's/^CON_NAME=//' | sed -e 's/[[:space:]]*$//'`

    if [[ ! -z "$APP_PREFIX" ]]; then
        local RUNNING_APPS=`docker ps -aq -f name="^$APP_PREFIX((?:-|_).+)*(-|_)(app|php)$" -f status="running"`
        echo "$RUNNING_APPS"
    elif [[ ! -z "$APP_NAME" ]]; then
        echo "$APP_NAME"
    else
        echo ""
    fi

    exit 0
}

# offer a function that tries to find the current -web container name
function get_nginx_names() {
    local ENV_FILE=$1
    local APP_PREFIX=`grep "^CON_PREFIX=" "$ENV_FILE" | sed -e 's/^CON_PREFIX=//' | sed -e 's/[[:space:]]*$//'`
    local APP_NAME=`grep "^CON_NAME=" "$ENV_FILE" | sed -e 's/^CON_NAME=//' | sed -e 's/[[:space:]]*$//'`

    if [[ ! -z "$APP_PREFIX" ]]; then
        local RUNNING_APPS=`docker ps -aq -f name="^$APP_PREFIX((?:-|_).+)*(-|_)web$" -f status="running"`
        echo "$RUNNING_APPS"
    elif [[ ! -z "$APP_NAME" ]]; then
        echo "$APP_NAME"
    else
        echo ""
    fi

    exit 0
}

# offer a function to start compose and enter bash
function compose_run() {
    local COMPOSE=$1
    local ENV_FILE=$2

    docker-compose -f "$COMPOSE" up -d

    if [[ ! -z "$ENV_FILE" ]]; then
        update_host_files "$ENV_FILE"
        local CON_NAMES=(`get_container_names "$ENV_FILE"`)

        if [[ 0 != ${#CON_NAMES[@]} ]]; then
            # retry sh, if bash is not found
            docker exec -it "${CON_NAMES[0]}" bash || \
            docker exec -it "${CON_NAMES[0]}" sh
        fi
    fi
}

# update any running -web and -app containers /etc/hosts file with the new started IP of the current -web container
function update_host_files() {
    local ENV_FILE=$1
    local HOST_ACTION=$2
    local WEB_CON_NAMES=(`get_nginx_names "$ENV_FILE"`)
    local APP_CON_NAMES=(`get_container_names "$ENV_FILE"`)

    if [[ -z "$HOST_ACTION" ]]; then
        HOST_ACTION="append"
    fi

    if [[ 0 != ${#WEB_CON_NAMES[@]} && 0 != ${#APP_CON_NAMES[@]} ]]; then
        SHALL_BE_PUBLISHED=

        for WEB_CON in "${WEB_CON_NAMES[@]}"; do
            WEB_CON_STATE=`docker ps -a --format "table {{.Status}}\t{{.ID}}\t{{.Names}}" | grep "$WEB_CON"`

            if [[ $WEB_CON_STATE == *"Up "* ]]; then
                local WEB_IP=`docker inspect --format '{{ range .NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}' $WEB_CON`
                local WEB_HOST=`docker inspect --format '{{ .Config.Env }}' $WEB_CON | sed 's/^\[//g' | sed 's/\]$//g' | sed 's/, /,/g' | tr " " "\n" | sed 's/,/ /g' | grep VIRTUAL_HOST= | sed -e 's/^VIRTUAL_HOST=//' | sed -e 's/[[:space:]]*$//'`
                local WEB_HASH=`docker inspect --format '{{ .Config.Hostname }}' $WEB_CON`
                SHALL_BE_PUBLISHED=yes

                # remove the line from temporary file, if existing
                if [[ "remove" == "$HOST_ACTION" ]]; then
                    sed -i "/$WEB_HOST/d" "$TEMP_HOSTS_PATH"
                    sed -i "/$WEB_HASH/d" "$TEMP_HOSTS_PATH"

                # add the IP => HOST to the temporary file
                elif [[ ! -z "$WEB_IP" && ! -z "$WEB_HOST" && -z `grep "$WEB_HOST" "$TEMP_HOSTS_PATH"` ]]; then
                    echo -e "$WEB_IP\t\t$WEB_HOST $WEB_HASH" >> "$TEMP_HOSTS_PATH"
                fi
            fi
        done

        for APP_CON in "${APP_CON_NAMES[@]}"; do
            APP_CON_STATE=`docker ps -a --format "table {{.Status}}\t{{.ID}}\t{{.Names}}" | grep "$APP_CON"`

            if [[ $APP_CON_STATE == *"Up "* ]]; then
                local APP_IP=`docker inspect --format '{{ range .NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}' $APP_CON`
                local APP_HASH=`docker inspect --format '{{ .Config.Hostname }}' $APP_CON`
                SHALL_BE_PUBLISHED=yes

                # remove the line from temporary file, if existing
                if [[ "remove" == "$HOST_ACTION" ]]; then
                    sed -i "/$APP_HASH/d" "$TEMP_HOSTS_PATH"

                # add the IP => HOST to the temporary file
                elif [[ ! -z "$APP_IP" && ! -z "$APP_HASH" && -z `grep "$APP_HASH" "$TEMP_HOSTS_PATH"` ]]; then
                    echo -e "$APP_IP\t\t$APP_HASH" >> "$TEMP_HOSTS_PATH"
                fi
            fi
        done

        if [[ ! -z "$SHALL_BE_PUBLISHED" ]]; then
            publish_host_files
        fi
    fi
}

# update the /etc/hosts file in any proxy related container with data from .current-hosts file
function publish_host_files() {
    local TARGET_CONTAINERS=`docker ps -a --format "{{ .Names }}" -f status="running" -f name="-web" -f name="_web" -f name="-php" -f name="_php" -f name="-app" -f name="_app"`
    local COUNTER=0

    while read -r CURRENT; do
        CURRENT_CONTENT=`docker exec $CURRENT /bin/sh -c "cat /etc/hosts"`
        CURRENT_CONTENT=`echo "$CURRENT_CONTENT" | sed '/^### DockerExec hosts file update ###/,$d'`
        UPDATED_HOSTS="$CURRENT_CONTENT\n### DockerExec hosts file update ###\n"`cat $TEMP_HOSTS_PATH`
        docker exec $CURRENT /bin/sh -c "echo '$UPDATED_HOSTS' > /etc/hosts"
        COUNTER=$((COUNTER+1))
    done <<< "$TARGET_CONTAINERS"

    print_info "The /etc/hosts file of $COUNTER proxy containers was updated successfully!"
}

# watch the environment
if [[ "dev" == "$ENVIRONMENT" ]]; then
    # test project files
    COMPOSE=`test_files "$ENV_FILE" "docker-compose"`
    if [[ "0" != "$?" ]]; then
        echo $COMPOSE
        exit 1
    fi

    # start the docker-compose
    if [[ "start" == "$ACTION" ]]; then
        compose_run "$COMPOSE" "$ENV_FILE"
        exit 0

    # stop and remove the containers
    elif [[ "stop" == "$ACTION" ]]; then
        docker-compose stop
        docker-compose rm -f
        exit 0

    else
        print_error "Unknown option '$ACTION'..." 1
        exit 1
    fi

elif [[ "prod" == "$ENVIRONMENT" ]]; then
    # test project files
    COMPOSE=`test_files "$ENV_FILE" "docker-compose.prod"`
    if [[ "0" != "$?" ]]; then
        echo $COMPOSE
        exit 1
    fi

    # start the docker-compose
    if [[ "start" == "$ACTION" ]]; then
        compose_run "$COMPOSE" "$ENV_FILE"
        exit 0

    # stop and remove the containers
    elif [[ "stop" == "$ACTION" ]]; then
        update_host_files "$ENV_FILE" "remove"
        docker-compose -f "$COMPOSE" stop
        docker-compose -f "$COMPOSE" rm -f
        exit 0

    else
        print_error "Unknown option '$ACTION'..." 1
        exit 1
    fi

elif [[ "proxy" == "$ENVIRONMENT" ]]; then
    COMPOSE="docker-compose.proxy"

    # start docker-compose in proxy path
    if [[ "init" == "$ACTION" ]]; then
        # go to proxy dir and check for project files
        cd "$PROXY_PATH"
        COMPOSE=`test_files_proxy "$ENV_FILE" "docker-compose"`
        if [[ "0" != "$?" ]]; then
            echo $COMPOSE
            exit 1
        fi

        # check the /certs directory
        if [[ ! -d "$CERTS_PATH" || ! -f "$CERTS_PATH/docker.test.key" ]]; then
            print_error "The proxy is not ready to start, yet! Try 'DockerExec do init-certs' to fix this."
            exit 1
        fi

        # fetch parameters from .env file
        PROXY_NAME=`grep "^PROXY_NAME=" "$ENV_FILE" | sed -e 's/^PROXY_NAME=//' | sed -e 's/[[:space:]]*$//'`
        NETWORK_NAME=`grep "^NETWORK_NAME=" "$ENV_FILE" | sed -e 's/^NETWORK_NAME=//' | sed -e 's/[[:space:]]*$//'`

        # first, test if the network exists and create, if not
        NETWORK_EXISTS=`docker network ls | grep "$NETWORK_NAME"`
        if [[ -z "$NETWORK_EXISTS" ]]; then
            docker network create --attachable "$NETWORK_NAME"
            print_info "Network $NETWORK_NAME was created successfully!"
        fi

        # reset the temporary hosts
        if [[ -f "$TEMP_HOSTS_PATH" ]]; then
            rm "$TEMP_HOSTS_PATH"
        fi
        touch "$TEMP_HOSTS_PATH"

        # print out all found hosts and start compose
        print_hosts "$COMPOSE"
        docker-compose up
        exit 0

    # stop and remove the proxy
    elif [[ "finish" == "$ACTION" ]]; then
        # go to proxy dir
        cd "$PROXY_PATH"

        docker-compose stop
        docker-compose rm -f

        # remove the temporary hosts
        if [[ -f "$TEMP_HOSTS_PATH" ]]; then
            rm "$TEMP_HOSTS_PATH"
        fi
        exit 0

    # start the docker-compose
    elif [[ "start" == "$ACTION" ]]; then
        # test project files
        COMPOSE=`test_files "$ENV_FILE" "$COMPOSE"`
        if [[ "0" != "$?" ]]; then
            echo $COMPOSE
            exit 1
        fi

        # print out all found hosts and start
        print_hosts "$COMPOSE"
        compose_run "$COMPOSE" "$ENV_FILE"
        exit 0

    # stop and remove the containers
    elif [[ "stop" == "$ACTION" ]]; then
        # test project files
        COMPOSE=`test_files "$ENV_FILE" "$COMPOSE"`
        if [[ "0" != "$?" ]]; then
            echo $COMPOSE
            exit 1
        fi

        update_host_files "$ENV_FILE" "remove"
        docker-compose -f "$COMPOSE" stop
        docker-compose -f "$COMPOSE" rm -f
        exit 0

    # start the docker proxy db with bash
    elif [[ "db" == "$ACTION" ]]; then
        RUNNING_APP=`docker ps -aq -f name="proxy-db" -f status="running"`

        if [[ ! -z "$RUNNING_APP" ]]; then
            USE_DATABASE="${PARAMETERS[0]}"
            USE_DB_FILE="${PARAMETERS[1]}"

            if [[ ! -z "$USE_DATABASE" && ! -z "$USE_DB_FILE" ]]; then
                docker exec -it proxy-db bash -c "mysql -proot -e 'CREATE DATABASE IF NOT EXISTS $USE_DATABASE' && mysql -proot '$USE_DATABASE' < '/var/data/$USE_DB_FILE'" > /dev/null 2>&1
                print_info "Done"
            else
                docker exec -it proxy-db bash -c "cd /var/data && bash"
            fi
            exit 0
        else
            print_error "The proxy-db container is not up and running..." 1
            exit 1
        fi

    # start the docker proxy pg with bash
    elif [[ "pg" == "$ACTION" ]]; then
        RUNNING_APP=`docker ps -aq -f name="proxy-pg" -f status="running"`

        if [[ ! -z "$RUNNING_APP" ]]; then
            USE_DATABASE="${PARAMETERS[0]}"
            USE_DB_FILE="${PARAMETERS[1]}"

            if [[ ! -z "$USE_DATABASE" && ! -z "$USE_DB_FILE" ]]; then
                docker exec -it proxy-pg bash -c "echo \"SELECT 'CREATE DATABASE $USE_DATABASE' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$USE_DATABASE')\gexec\" | psql && psql -d '$USE_DATABASE' < '/var/data/$USE_DB_FILE'" > /dev/null 2>&1
                print_info "Done"
            else
                docker exec -it proxy-pg bash -c "cd /var/data && bash"
            fi
            exit 0
        else
            print_error "The proxy-pg container is not up and running..." 1
            exit 1
        fi

    # generate a docker-compose.proxy.yaml with a basic configuration
    elif [[ "generate" == "$ACTION" ]]; then
        DOMAIN_PREFIX="${PARAMETERS[0]}"

        if [[ -z "$DOMAIN_PREFIX" ]]; then
            DOMAIN_PREFIX="my-project"
        fi

        if [[ ! ( -f "$COMPOSE.yml" || -f "$COMPOSE.yaml" ) ]]; then
            {
                echo "version: '3.5'"
                echo
                echo "services:"
                echo "    web:"
                echo "       image: \${WEB_IMAGE}"
                echo "       container_name: \${CON_PREFIX}-web"
                echo "       env_file: .env"
                echo "       volumes:"
                echo "           - .:/var/www/html"
                echo "       expose:"
                echo "           - 80"
                echo "           - 443"
                echo "       environment:"
                echo "           VIRTUAL_HOST: ${DOMAIN_PREFIX}.docker.test"
                echo "           VIRTUAL_PORT: 443"
                echo "           VIRTUAL_PROTO: https"
                echo "       links:"
                echo "           - php"
                echo
                echo "    php:"
                echo "        image: \${PHP_IMAGE}"
                echo "        container_name: \${CON_PREFIX}-app"
                echo "        env_file: .env"
                echo "        volumes:"
                echo "            - .:/var/www/html"
                echo
                echo "networks:"
                echo "    default:"
                echo "        external:"
                echo "            name: \${NETWORK}"
                echo
            } >> docker-compose.proxy.yaml

            print_info "A docker-compose.proxy.yaml was added."
        fi

        if [[ ! -f "$ENV_FILE" ]]; then
            {
                echo "# docker-compose configuration"
                echo "CON_PREFIX=${DOMAIN_PREFIX}"
                echo "PHP_IMAGE=php:fpm"
                echo "WEB_IMAGE=nginx/nginx:latest"
                echo "NETWORK=proxy-network"
                echo
            } >> .env

            print_info "A .env was added."
        fi

        exit 0

    else
        print_error "Unknown option '$ACTION'..." 1
        exit 1
    fi

elif [[ "do" == "$ENVIRONMENT" ]]; then
    # stop, then remove all containers
    if [[ "finish" == "$ACTION" ]]; then
        docker stop $(docker ps -aq)
        docker rm -f $(docker ps -aq)

        if [[ -f "$TEMP_HOSTS_PATH" ]]; then
            rm "$TEMP_HOSTS_PATH"
        fi
        exit 0

    # remove all stopped containers
    elif [[ "remove" == "$ACTION" ]]; then
        docker rm -f $(docker ps -aq -f "status=exited")
        exit 0

    # remove all images that are no more in use
    elif [[ "cleanup" == "$ACTION" ]]; then
        docker rmi -f $(docker images | grep "<none>" | awk "{print \$3}")
        exit 0

    # test, if a container is running
    elif [[ "watch-running" == "$ACTION" ]]; then
        CONTAINER="${PARAMETERS[0]}"

        if [[ -z "$CONTAINER" ]]; then
            print_error "To test a container, please provide its name!" 1
            exit 1
        fi

        STATE=`docker ps -a --format "table {{.Status}}\t{{.Names}}" | grep "$CONTAINER"`

        if [[ $STATE == *"Up "* ]]; then
            echo "TRUE"
        else
            echo "FALSE"
        fi

        exit 0

    # print the current state of Docker into a file
    elif [[ "status" == "$ACTION" ]]; then
        # let's see, if a file name was given
        REAL_STATUS_FILE="$STATUS_FILE_NAME"

        if [[ 0 != "${#PARAMETERS[@]}" ]]; then
            REAL_STATUS_FILE="${PARAMETERS[0]}"
        fi

        # create the full path and ask for confirmation
        STATUS_PATH="$CURRENT_DIR/$REAL_STATUS_FILE"
        read -r -p "A file $REAL_STATUS_FILE will be created (or override existing). Continue? [Y/n]" input

        case $input in
            [yY][eE][sS]|[yY])
                # remove the existing file
                if [[ -f "$STATUS_PATH" ]]; then
                    rm -f "$STATUS_PATH"
                fi

                # print out status info into a static file
                echo "### Currently running containers" >> "$STATUS_PATH"
                echo "" >> "$STATUS_PATH"
                docker ps -a --format "table {{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}" >> "$STATUS_PATH"
                echo "" >> "$STATUS_PATH"
                echo "" >> "$STATUS_PATH"
                echo "### Currently existing images" >> "$STATUS_PATH"
                echo "" >> "$STATUS_PATH"
                docker images >> "$STATUS_PATH"
                echo "" >> "$STATUS_PATH"
                ;;
            *)
                print_error "Canceled..." 1
                ;;
        esac

        exit 0

    # use prompts to generate certificates for browser usage
    # see https://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309
    # see https://two-oes.medium.com/working-with-openssl-and-dns-alternative-names-367f06a23841
    # see https://www.openssl.org/docs/manmaster/man5/x509v3_config.html
    # to test a .crt file, try: openssl x509 -in certs/docker.test.crt -text -noout
    elif [[ "init-certs" == "$ACTION" ]]; then
        if [[ -z `which openssl` ]]; then
            print_error "Openssl seems not to be installed on this machine. But it is necessary to generate keys..." 1
            exit 1
        fi

        # create the certs path, if not done, yet
        if [[ ! -d "$CERTS_PATH" ]]; then
            mkdir -p "$CERTS_PATH"
        fi

        # some security info
        print_info "Attention: This is the key used to sign the certificate requests. Anyone holding this can sign certificates on your behalf. So keep it safe!"

        # ask the user for some details on the certificate
        read -r -p "Define a key size. Default is 4096, which does a good job in security. [4096]: " rsa_key_length
        read -r -p "How long shall this certificate be valid (in days) [3650]: " rsa_valid_days
        read -r -p "Add an organisation name to differ certain keys [none]: " rsa_org_name

        RSA_KEY_LENGTH=4096
        if [[ ! -z "$rsa_key_length" ]]; then
            RSA_KEY_LENGTH=$rsa_key_length
        fi

        RSA_VALID_DAYS=3650
        if [[ ! -z "$rsa_valid_days" ]]; then
            RSA_VALID_DAYS=$rsa_valid_days
        fi

        RSA_ORG_NAME="Docker Development"
        if [[ ! -z "$rsa_org_name" ]]; then
            RSA_ORG_NAME="$rsa_org_name"
        fi

        # create config files for openssl
        cat > "$CERTS_PATH/domain.config" << EOF
[req]
default_bits = $RSA_KEY_LENGTH
prompt = no
default_md = sha256
x509_extensions = req_ext
req_extensions = req_ext
distinguished_name = dn

[ dn ]
O = $RSA_ORG_NAME
OU = Docker Proxy Stack
CN = docker.test

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth
basicConstraints = critical, CA:false

[ alt_names ]
DNS.1 = docker.test
DNS.2 = *.docker.test
DNS.3 = localhost
IP.4 = 127.0.0.1
IP.5 = 0:0:0:0:0:0:0:1
EOF

        cat > "$CERTS_PATH/ca.config" << EOF
[req]
default_bits = $RSA_KEY_LENGTH
prompt = no
default_md = sha256
x509_extensions = usr_cert
distinguished_name = dn

[ dn ]
O = $RSA_ORG_NAME
OU = Docker Proxy Stack
CN = Docker Proxy Stack

[ usr_cert ]
keyUsage = critical, keyCertSign
basicConstraints = critical, @basic_constraints
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid, issuer

[ basic_constraints ]
CA = true
pathlen = 0
EOF

        # create a root key and rootCA for docker.test
        openssl genrsa -out "$CERTS_PATH/rootCA.key" $RSA_KEY_LENGTH
        openssl req -new -x509 -nodes -key "$CERTS_PATH/rootCA.key" \
            -days $RSA_VALID_DAYS \
            -out "$CERTS_PATH/rootCA.crt" \
            -config <( cat "$CERTS_PATH/ca.config" )

        # create a certificate for docker.test
        openssl genrsa -out "$CERTS_PATH/docker.test.key" $RSA_KEY_LENGTH
        openssl req -new -x509 -nodes -key "$CERTS_PATH/docker.test.key" \
            -days $RSA_VALID_DAYS \
            -out "$CERTS_PATH/docker.test.csr" \
            -config <( cat "$CERTS_PATH/domain.config" )

        # last step: sign the domain certificate with the rootCA
        openssl x509 -req -CAcreateserial \
            -in "$CERTS_PATH/docker.test.csr" \
            -CA "$CERTS_PATH/rootCA.crt" \
            -CAkey "$CERTS_PATH/rootCA.key" \
            -out "$CERTS_PATH/docker.test.crt" \
            -days $RSA_VALID_DAYS \
            -extensions 'req_ext' \
            -extfile <(cat "$CERTS_PATH/domain.config" )

        # rm the temporary config files
        if [[ -f "$CERTS_PATH/domain.config" ]]; then
            rm -f "$CERTS_PATH/domain.config"
        fi

        if [[ -f "$CERTS_PATH/ca.config" ]]; then
            rm -f "$CERTS_PATH/ca.config"
        fi

        exit 0

    # shortcut to list all docker containers
    elif [[ "ps" == "$ACTION" ]]; then
        docker ps -a --format "table {{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"
        exit 0

    else
        print_error "Unknown option '$ACTION'..." 1
        exit 1
    fi

else
    print_error "There is no environment named '$ENVIRONMENT'..." 1
    exit 1
fi

exit 0
